// 17.6
// интерфейс очереди
#ifndef _STACK_H_
#define _STACK_H_

#include <stdbool.h>

typedef struct item
{
	char symbol;
} Item;

#define MAXSTACK 10
typedef struct node
{
	Item item;
	struct node * prev;
} Node;

typedef struct stack 
{
	Node * up; // указатель на верхушку стека
	int items; // количество элементов в стеке 
} Stack;

// операция: инициализация стека 
// предусловие: pq указывает на стек 
// постусловие: стек инициализирована пустым содержимым 
void InitializeStack(Stack * ps);

// операция: проверка, полон ли стек
// предусловие: ps указывает на ранее инициализированный стек 
// постусловие: возвращает True, если стек полон, и False в противном случае
bool StackIsFull(const Stack * ps);

// операция: проверка, пустой ли Стек 
// предусловие: ps указывает на ранее инициализированный стек 
// постусловие: возвращает True, если стек полон, и False в противном случае
bool StackIsEmpty(const Stack * ps);

// операция: определение количества элементов в стеке 
// предусловие: ps указывает на ранее инициализированный стек 
// постусловние: возвращает количество элементов в стеке 
int StackItemCount(const Stack * ps);

// операция: добавление элемента в стек 
// предусловие: ps указывает на ранее инциализированный стек
// 							элемент должен быть помещен в стек
// постусловие: если стек не пуст, элемент помещается в стек и функция возвращает True;
// 							в противном случае остается незименным;
// 							а функция возвращает False
bool Push(Item item, Stack * ps);

// операция: 		удаление элемента из стека 
// предусловие:	ps указывает на ранее инициализированный стек 
// постусловие: если стек не пуст, удаляет элемент с верхушки стека и возвращает True
// 							если операция опустошает стек, стек переустанавливается в пустое состояние
// 							если стек пуст с самого начала, он остается неизменный, и функция возвращает False
bool Pop(Stack * ps);

// операция: опустошение стека 
// предусловие: ps указывает на ранее инициализированный стек
// постусловие: стек пуст 
void EmptyTheStack(Stack * ps);

void Traverse(const Stack * stack, void (*pfun)(Item item)); 
#endif
